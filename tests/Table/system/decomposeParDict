/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM Extend Project: Open source CFD        |
|  \\    /   O peration     | Version:  1.6-ext                               |
|   \\  /    A nd           | Web:      www.extend-project.de                 |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    note        "mesh decomposition control dictionary";
    location    "system";
    object      decomposeParDict;
}

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

//numberOfSubdomains  64;
numberOfSubdomains  8;

//- Keep owner and neighbour on same processor for faces in zones:
// preserveFaceZones (pistonLayerFaces);

// Face zones which need to be present on all CPUs in its entirety
// globalFaceZones (ggiInside ggiOutside);

//- Keep owner and neighbour on same processor for faces in patches:
//  (makes sense only for cyclic patches)

//preservePatches (frontAndBack);

preserveCyclics on;

method          scotch;
// method          hierarchical;
// method          simple;
// method          metis;
// method          manual;

simpleCoeffs
{
//    n           (1 1 16);
    n           (2 1 4);
    delta       0.001;
}

hierarchicalCoeffs
{
    n           (1 1 2);
    delta       0.001;
    order       zyx;
}

metisCoeffs
{
 /*
    processorWeights
    (
        1
        1
        1
        1
    );
  */
}

scotchCoeffs
{
    //processorWeights
    //(
    //    1
    //    1
    //    1
    //    1
    //);
    //writeGraph  true;
    //strategy "b";
}

manualCoeffs
{
    dataFile    "engineCylinderDecomposition";
}


//// Is the case distributed
//distributed     yes;
//// Per slave (so nProcs-1 entries) the directory above the case.
//roots           
//(
//    "/tmp"
//    "/tmp"
//);

cellZonesToDecompose
(
//    pistonCells 
);

cylinderZones
{
//    pistonCells 2;
    remainderCells 3;
}


// ************************************************************************* //
