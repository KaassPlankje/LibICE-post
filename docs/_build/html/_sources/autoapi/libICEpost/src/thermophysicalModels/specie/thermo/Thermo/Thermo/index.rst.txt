libICEpost.src.thermophysicalModels.specie.thermo.Thermo.Thermo
===============================================================

.. py:module:: libICEpost.src.thermophysicalModels.specie.thermo.Thermo.Thermo

.. autoapi-nested-parse::

   @author: F. Ramognino       <federico.ramognino@polimi.it>
   Last update:        12/06/2023



Classes
-------

.. autoapisummary::

   libICEpost.src.thermophysicalModels.specie.thermo.Thermo.Thermo.Thermo


Module Contents
---------------

.. py:class:: Thermo(Rgas: float)

   Bases: :py:obj:`libICEpost.src.base.BaseClass.BaseClass`


   Base class for computation of thermodynamic properties of chemical specie (cp, cv, ...)

   .. note::

      -> For interal energy-based models, need to implement us (sensible)
      -> For entalpy-based models, need to implement ha (absolute)

   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   .. attribute:: Rgas

      float
      The mass specific gas constant


   .. py:attribute:: Rgas


   .. py:method:: __str__()


   .. py:method:: __repr__()


   .. py:method:: cp(p: float, T: float) -> float
      :abstractmethod:


      Constant pressure heat capacity [J/kg/K]



   .. py:method:: hf() -> float
      :abstractmethod:


      Enthalpy of formation [J/kg]



   .. py:method:: ha(p: float, T: float) -> float

      Absolute enthalpy [J/kg]



   .. py:method:: ua(p: float, T: float) -> float

      Absolute internal energy [J/kg]

      us = ua + hf



   .. py:method:: us(p: float, T: float) -> float

      Sensible internal energy [J/kg]



   .. py:method:: hs(p: float, T: float) -> float

      Sensible enthalpy [J/kg]

      hs = ha - hf



   .. py:method:: dcpdT(p: float, T: float) -> float
      :abstractmethod:


      dcp/dT [J/kg/K^2]



