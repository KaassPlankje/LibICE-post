libICEpost.src.thermophysicalModels.thermoModels.CombustionModel
================================================================

.. py:module:: libICEpost.src.thermophysicalModels.thermoModels.CombustionModel

.. autoapi-nested-parse::

   @author: <N. Surname>       <e-mail>
   Last update:        DD/MM/YYYY

   Combustion models

   Content of the package:
       CombustionModel (class)
           #TODO

       StoichiometricCombustion (class)
           #TODO




Submodules
----------

.. toctree::
   :maxdepth: 1

   /autoapi/libICEpost/src/thermophysicalModels/thermoModels/CombustionModel/CombustionModel/index
   /autoapi/libICEpost/src/thermophysicalModels/thermoModels/CombustionModel/NoCombustion/index
   /autoapi/libICEpost/src/thermophysicalModels/thermoModels/CombustionModel/PremixedCombustion/index


Classes
-------

.. autoapisummary::

   libICEpost.src.thermophysicalModels.thermoModels.CombustionModel.CombustionModel
   libICEpost.src.thermophysicalModels.thermoModels.CombustionModel.PremixedCombustion
   libICEpost.src.thermophysicalModels.thermoModels.CombustionModel.NoCombustion


Package Contents
----------------

.. py:class:: CombustionModel(/, *, reactants: libICEpost.src.thermophysicalModels.specie.specie.Mixture.Mixture, reactionModel: str = 'Stoichiometry', state: libICEpost.src.thermophysicalModels.thermoModels.ThermoState.ThermoState | dict[str:type] = ThermoState(), **kwargs)

   Bases: :py:obj:`libICEpost.src.base.BaseClass.BaseClass`


   Class handling combustion

   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   .. attribute:: air

      ThermoMixture
      The thermodynamic mixture of air


   .. py:attribute:: _freshMixture
      :type:  libICEpost.src.thermophysicalModels.specie.specie.Mixture.Mixture


   .. py:attribute:: _combustionProducts
      :type:  libICEpost.src.thermophysicalModels.specie.specie.Mixture.Mixture


   .. py:attribute:: _mixture
      :type:  libICEpost.src.thermophysicalModels.specie.specie.Mixture.Mixture


   .. py:attribute:: _state
      :type:  libICEpost.src.thermophysicalModels.thermoModels.ThermoState.ThermoState


   .. py:attribute:: _reactionModel
      :type:  libICEpost.src.thermophysicalModels.specie.reactions.ReactionModel.ReactionModel.ReactionModel


   .. py:property:: freshMixture
      :type: libICEpost.src.thermophysicalModels.specie.specie.Mixture.Mixture

      The current fresh (unburnt) mixture

      :returns: Mixture


   .. py:property:: combustionProducts
      :type: libICEpost.src.thermophysicalModels.specie.specie.Mixture.Mixture

      The combustion products

      :returns: Mixture


   .. py:property:: mixture
      :type: libICEpost.src.thermophysicalModels.specie.specie.Mixture.Mixture

      The mixture at current state

      :returns: Mixture


   .. py:property:: reactionModel
      :type: libICEpost.src.thermophysicalModels.specie.reactions.ReactionModel.ReactionModel.ReactionModel

      The reaction model

      :returns: ReactionModel


   .. py:property:: state
      :type: libICEpost.src.thermophysicalModels.thermoModels.ThermoState.ThermoState

      The current state (read only access)

      :returns: ThermoState


   .. py:method:: update(*, reactants: libICEpost.src.thermophysicalModels.specie.specie.Mixture.Mixture = None, state: libICEpost.src.thermophysicalModels.thermoModels.ThermoState.ThermoState | dict[str:type] = None, **kwargs) -> bool
      :abstractmethod:


      Update the state of the system. To be overwritten in child classes.

      :param reactants: update reactants composition. Defaults to None.
      :type reactants: Mixture, optional
      :param state (ThermoState|dict[str: type], optional): the state variables of the system (needed to
                                          update the combustion model - e.g. equilibrium)

      :returns: if something changed
      :rtype: bool



.. py:class:: PremixedCombustion(/, *, air: libICEpost.src.thermophysicalModels.specie.specie.Mixture.Mixture, fuel: libICEpost.src.thermophysicalModels.specie.specie.Mixture.Mixture, xb: float = 0.0, **kwargs)

   Bases: :py:obj:`libICEpost.src.thermophysicalModels.thermoModels.CombustionModel.CombustionModel.CombustionModel`


   Premixted combustion model

   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Attributes:


   .. py:attribute:: _fuel
      :type:  libICEpost.src.thermophysicalModels.specie.specie.Mixture.Mixture


   .. py:attribute:: _air
      :type:  libICEpost.src.thermophysicalModels.specie.specie.Mixture.Mixture


   .. py:attribute:: _alphaSt
      :type:  float


   .. py:attribute:: _xb
      :type:  float


   .. py:property:: air
      :type: libICEpost.src.thermophysicalModels.specie.specie.Mixture.Mixture

      The air mixture

      :returns: Mixture


   .. py:property:: fuel
      :type: libICEpost.src.thermophysicalModels.specie.specie.Mixture.Mixture

      The current fuel mixture

      :returns: Mixture


   .. py:property:: alpha
      :type: float

      The current air-to fuel ratio.

      :returns: float


   .. py:property:: alphaSt
      :type: float

      The current stoichiometric air-to fuel ratio.

      :returns: float


   .. py:property:: phi
      :type: float

      The current fuel-to-air equivalence ratio.

      :returns: float


   .. py:property:: Lambda
      :type: float

      The current air-to-fuel equivalence ratio.

      :returns: float


   .. py:method:: fromDictionary(dictionary: dict | libICEpost.src.base.dataStructures.Dictionary.Dictionary)
      :classmethod:


      Create from dictionary.
      {
          air (Mixture): Air
          fuel (Mixture): The fuel composition
          reactants (Mixture): The reactants composition

          reactionModel (str, optional): Model handling reactions. defaults to "Stoichiometry".
          <ReactionModel>Dict (dict, optional): the dictionary for construction of the specific ReactionModel.

          state (ThermoState, optional): Giving current state to manage state-dependend
              combustion models(e.g. equilibrium). Defaults to empty state ThermoState().
      }



   .. py:method:: update(xb: float = None, *, air: libICEpost.src.thermophysicalModels.specie.specie.Mixture.Mixture = None, fuel: libICEpost.src.thermophysicalModels.specie.specie.Mixture.Mixture = None, **kwargs) -> bool

      Update mixture composition based on progress variable, fuel, and reactants composition.

      :param xb: the burned mass fraction. Defaults to None (no update).
      :type xb: float, None
      :param air: update air composition. Defaults to None.
      :type air: Mixture, optional
      :param fuel: update fuel composition. Defaults to None.
      :type fuel: Mixture, optional
      :param reactants: update reactants composition. Defaults to None.
      :type reactants: Mixture, optional

      :returns: if something changed
      :rtype: bool



.. py:class:: NoCombustion(/, *, reactants: libICEpost.src.thermophysicalModels.specie.specie.Mixture.Mixture, **kwargs)

   Bases: :py:obj:`libICEpost.src.thermophysicalModels.thermoModels.CombustionModel.CombustionModel.CombustionModel`


   No combustion (inhert)

   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Attributes:


   .. py:method:: fromDictionary(dictionary: dict | libICEpost.src.base.dataStructures.Dictionary.Dictionary)
      :classmethod:


      Create from dictionary.
      {
          reactants (Mixture): The reactants composition
      }



   .. py:method:: update(*args, **kwargs) -> bool

      Update mixture composition

      :param reactants: update reactants composition. Defaults to None.
      :type reactants: Mixture, optional

      :returns: if something changed
      :rtype: bool



