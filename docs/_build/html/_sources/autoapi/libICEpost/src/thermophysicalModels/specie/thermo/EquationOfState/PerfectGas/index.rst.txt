libICEpost.src.thermophysicalModels.specie.thermo.EquationOfState.PerfectGas
============================================================================

.. py:module:: libICEpost.src.thermophysicalModels.specie.thermo.EquationOfState.PerfectGas

.. autoapi-nested-parse::

   @author: F. Ramognino       <federico.ramognino@polimi.it>
   Last update:        12/06/2023



Classes
-------

.. autoapisummary::

   libICEpost.src.thermophysicalModels.specie.thermo.EquationOfState.PerfectGas.PerfectGas


Module Contents
---------------

.. py:class:: PerfectGas(Rgas: float)

   Bases: :py:obj:`libICEpost.src.thermophysicalModels.specie.thermo.EquationOfState.EquationOfState.EquationOfState`


   Perfect gas equation of state

   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   .. attribute:: Rgas

      float
      The mass specific gas constant


   .. py:method:: fromDictionary(dictionary)
      :classmethod:


      Create from dictionary.



   .. py:attribute:: Rgas


   .. py:method:: cp(p: float, T: float) -> float

      Constant pressure heat capacity contribution [J/kg/K]



   .. py:method:: h(p: float, T: float) -> float

      Enthalpy contribution [J/kg]



   .. py:method:: u(p: float, T: float) -> float

      Internal energy contribution [J/kg]



   .. py:method:: rho(p: float, T: float) -> float

      Density [kg/m^3]



   .. py:method:: T(p: float, rho: float) -> float

      Temperature [K]



   .. py:method:: p(T: float, rho: float) -> float

      Pressure [Pa]



   .. py:method:: Z(p: float, T: float) -> float

      Compression factor [-]



   .. py:method:: cpMcv(p: float, T: float) -> float

      Difference cp - cv.



   .. py:method:: dcpdT(p, T)

      dcp/dT [J/kg/K^2]



   .. py:method:: dpdT(p, T)

      dp/dT [Pa/K]



   .. py:method:: dTdp(p, T)

      dT/dp [K/Pa]



   .. py:method:: drhodp(p, T)

      drho/dp [kg/(m^3 Pa)]



   .. py:method:: dpdrho(p, T)

      dp/drho [Pa * m^3 / kg]



   .. py:method:: drhodT(p, T)

      drho/dT [kg/(m^3 K)]



   .. py:method:: dTdrho(p, T)

      dT/drho [K * m^3 / kg]



