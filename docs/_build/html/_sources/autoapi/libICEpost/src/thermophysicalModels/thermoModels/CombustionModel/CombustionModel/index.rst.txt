libICEpost.src.thermophysicalModels.thermoModels.CombustionModel.CombustionModel
================================================================================

.. py:module:: libICEpost.src.thermophysicalModels.thermoModels.CombustionModel.CombustionModel

.. autoapi-nested-parse::

   @author: <N. Surname>       <e-mail>
   Last update:        DD/MM/YYYY



Classes
-------

.. autoapisummary::

   libICEpost.src.thermophysicalModels.thermoModels.CombustionModel.CombustionModel.CombustionModel


Module Contents
---------------

.. py:class:: CombustionModel(/, *, reactants: libICEpost.src.thermophysicalModels.specie.specie.Mixture.Mixture, reactionModel: str = 'Stoichiometry', state: libICEpost.src.thermophysicalModels.thermoModels.ThermoState.ThermoState | dict[str:type] = ThermoState(), **kwargs)

   Bases: :py:obj:`libICEpost.src.base.BaseClass.BaseClass`


   Class handling combustion

   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   .. attribute:: air

      ThermoMixture
      The thermodynamic mixture of air


   .. py:attribute:: _freshMixture
      :type:  libICEpost.src.thermophysicalModels.specie.specie.Mixture.Mixture


   .. py:attribute:: _combustionProducts
      :type:  libICEpost.src.thermophysicalModels.specie.specie.Mixture.Mixture


   .. py:attribute:: _mixture
      :type:  libICEpost.src.thermophysicalModels.specie.specie.Mixture.Mixture


   .. py:attribute:: _state
      :type:  libICEpost.src.thermophysicalModels.thermoModels.ThermoState.ThermoState


   .. py:attribute:: _reactionModel
      :type:  libICEpost.src.thermophysicalModels.specie.reactions.ReactionModel.ReactionModel.ReactionModel


   .. py:property:: freshMixture
      :type: libICEpost.src.thermophysicalModels.specie.specie.Mixture.Mixture

      The current fresh (unburnt) mixture

      :returns: Mixture


   .. py:property:: combustionProducts
      :type: libICEpost.src.thermophysicalModels.specie.specie.Mixture.Mixture

      The combustion products

      :returns: Mixture


   .. py:property:: mixture
      :type: libICEpost.src.thermophysicalModels.specie.specie.Mixture.Mixture

      The mixture at current state

      :returns: Mixture


   .. py:property:: reactionModel
      :type: libICEpost.src.thermophysicalModels.specie.reactions.ReactionModel.ReactionModel.ReactionModel

      The reaction model

      :returns: ReactionModel


   .. py:property:: state
      :type: libICEpost.src.thermophysicalModels.thermoModels.ThermoState.ThermoState

      The current state (read only access)

      :returns: ThermoState


   .. py:method:: update(*, reactants: libICEpost.src.thermophysicalModels.specie.specie.Mixture.Mixture = None, state: libICEpost.src.thermophysicalModels.thermoModels.ThermoState.ThermoState | dict[str:type] = None, **kwargs) -> bool
      :abstractmethod:


      Update the state of the system. To be overwritten in child classes.

      :param reactants: update reactants composition. Defaults to None.
      :type reactants: Mixture, optional
      :param state (ThermoState|dict[str: type], optional): the state variables of the system (needed to
                                          update the combustion model - e.g. equilibrium)

      :returns: if something changed
      :rtype: bool



