libICEpost.src.thermophysicalModels.specie.reactions.ReactionModel
==================================================================

.. py:module:: libICEpost.src.thermophysicalModels.specie.reactions.ReactionModel

.. autoapi-nested-parse::

   @author: F. Ramognino       <federico.ramognino@polimi.it>
   Last update:        01/02/2024

   Defines classes to handel reaction of mixtures involving multiple simple reactions

   Content of the package:
       ReactionModel (module)
           Base class

       Stoichiometry (module)
           Combustion with infinitely fast combustion through balancing of stoichiometry



Submodules
----------

.. toctree::
   :maxdepth: 1

   /autoapi/libICEpost/src/thermophysicalModels/specie/reactions/ReactionModel/ReactionModel/index
   /autoapi/libICEpost/src/thermophysicalModels/specie/reactions/ReactionModel/Stoichiometry/index
   /autoapi/libICEpost/src/thermophysicalModels/specie/reactions/ReactionModel/functions/index


Classes
-------

.. autoapisummary::

   libICEpost.src.thermophysicalModels.specie.reactions.ReactionModel.ReactionModel
   libICEpost.src.thermophysicalModels.specie.reactions.ReactionModel.Stoichiometry


Package Contents
----------------

.. py:class:: ReactionModel(reactants: libICEpost.src.thermophysicalModels.specie.specie.Mixture.Mixture)

   Bases: :py:obj:`libICEpost.src.base.BaseClass.BaseClass`


   Defines classes to handel reaction of mixtures involving multiple simple reactions

   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   .. attribute:: reactants

      (Mixture)
      The mixture of the reactants

   .. attribute:: products

      (Mixture)
      The mixture of products of the reaction

   .. attribute:: reactions

      (_Database)
      Database of oxidation reactions. Reference to database.chemistry.reactions


   .. py:attribute:: _ReactionType
      :type:  str


   .. py:property:: reactants


   .. py:property:: products


   .. py:property:: reactions


   .. py:property:: ReactionType


   .. py:method:: update(reactants: libICEpost.src.thermophysicalModels.specie.specie.Mixture.Mixture = None, **state: dict[str:float]) -> ReactionModel

      Method to update the reactants data based on the mixture composition (interface).

      :param reactants: Mixture of reactants if to be changed. Defaults to None.
      :type reactants: Mixture, optional
      :param \*\*state (dict[str: float]): State variables that could be needed by specific reaction model.

      :returns: self
      :rtype: ReactionModel



   .. py:method:: _update(reactants: libICEpost.src.thermophysicalModels.specie.specie.Mixture.Mixture = None) -> bool
      :abstractmethod:


      Method to update the reactants based on the mixture composition (implementation).

      :param reactants: Mixture of reactants if to be changed. Defaults to None.
      :type reactants: Mixture, optional

      :returns: returns true if already up-to-date, otherwise False. Used in derived class to know if can skipp updating the state.
      :rtype: bool



.. py:class:: Stoichiometry(reactants: libICEpost.src.thermophysicalModels.specie.specie.Mixture.Mixture, oxidizer: libICEpost.src.thermophysicalModels.specie.specie.Molecule.Molecule = database.chemistry.specie.Molecules.O2)

   Bases: :py:obj:`libICEpost.src.thermophysicalModels.specie.reactions.ReactionModel.ReactionModel.ReactionModel`


   Reaction model of fuel combustion with infinitely fast chemistry

   TODO:
   Extend to handle a generic reaction set, where there might be more then one oxidizer

   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
   .. attribute:: oxidiser

      Molecule
      The oxidiser

   .. attribute:: reactants

      (Mixture)
      The mixture of the reactants

   .. attribute:: products

      (Mixture)
      The mixture of products of the reaction

   .. attribute:: reactions

      (_Database)
      Database of oxidation reactions. Reference to database.chemistry.reactions


   .. py:attribute:: _ReactionType
      :type:  str
      :value: 'StoichiometricReaction'



   .. py:property:: fuel
      The sub-mixture of reactants with the fuels


   .. py:property:: oxidizer
      The oxidizer


   .. py:method:: fromDictionary(dictionary)
      :classmethod:


      :param dictionary: The dictionary from which constructing
                         {
                             "reactants" (Mixture): the mixture of reactants
                             "oxidiser" (Molecule): the oxidizer
                         }
      :type dictionary: dict

      Constructs from dictionary



   .. py:attribute:: _oxidizer


   .. py:method:: _updateFuels()

      Update list of fuels



   .. py:method:: _update(reactants: libICEpost.src.thermophysicalModels.specie.specie.Mixture.Mixture = None, **state) -> bool

      Method to update the products.

      :param reactants: Update mixture of reactants. Defaults to None.
      :type reactants: Mixture, optional

      :returns: wether the system was updated
      :rtype: bool



