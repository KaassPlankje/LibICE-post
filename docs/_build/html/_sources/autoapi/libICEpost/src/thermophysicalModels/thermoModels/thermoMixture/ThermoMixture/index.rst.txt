libICEpost.src.thermophysicalModels.thermoModels.thermoMixture.ThermoMixture
============================================================================

.. py:module:: libICEpost.src.thermophysicalModels.thermoModels.thermoMixture.ThermoMixture

.. autoapi-nested-parse::

   @author: F. Ramognino       <federico.ramognino@polimi.it>
   Last update:        12/06/2023



Classes
-------

.. autoapisummary::

   libICEpost.src.thermophysicalModels.thermoModels.thermoMixture.ThermoMixture.ThermoMixture


Module Contents
---------------

.. py:class:: ThermoMixture(mixture: libICEpost.src.thermophysicalModels.specie.specie.Mixture.Mixture, thermoType: dict[str:str], **thermoData)

   Bases: :py:obj:`libICEpost.src.base.Utilities.Utilities`


   Class for computing thermodynamic data of a mixture.

   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   .. attribute:: _mix

      Mixture
      The composition of the mixture.

   .. attribute:: _EoS

      mixingRules.EquationOfStateMixing
      The mixing rule used for computation of the equation of state of the mixture.

   .. attribute:: _Thermo

      mixingRules.ThermoMixing
      The mixing rule used for computation of the thermo of the mixture.


   .. py:attribute:: _mix
      :type:  libICEpost.src.thermophysicalModels.specie.specie.Mixture.Mixture


   .. py:attribute:: _EoS
      :type:  libICEpost.src.thermophysicalModels.thermoModels.thermoMixture.mixingRules.EquationOfState.EquationOfStateMixing.EquationOfStateMixing


   .. py:attribute:: _Thermo
      :type:  libICEpost.src.thermophysicalModels.thermoModels.thermoMixture.mixingRules.Thermo.ThermoMixing.ThermoMixing


   .. py:attribute:: _db
      :type:  libICEpost.Database._DatabaseClass


   .. py:property:: mix
      :type: libICEpost.src.thermophysicalModels.specie.specie.Mixture.Mixture

      The composition of the mixture (Mixture).


   .. py:property:: db
      :type: libICEpost.Database._DatabaseClass

      Database of thermodynamic data (reference to database.chemistry.thermo)


   .. py:property:: Thermo
      :type: libICEpost.src.thermophysicalModels.specie.thermo.Thermo.Thermo.Thermo

      Thermodynamic data of this mixture.


   .. py:property:: EoS
      :type: libICEpost.src.thermophysicalModels.specie.thermo.EquationOfState.EquationOfState.EquationOfState

      The equation of state of this mixture.

      :returns: EquationOfState


   .. py:method:: update(mixture: libICEpost.src.thermophysicalModels.specie.specie.Mixture.Mixture = None) -> ThermoMixture

      Update the mixture composition

      :param mixture: The new mixture. Defaults to None.
      :type mixture: Mixture, optional

      :returns: self
      :rtype: ThermoMixture



   .. py:method:: dcpdT(p: float, T: float) -> float

      dcp/dT [J/kg/K^2]



   .. py:method:: ha(p: float, T: float) -> float

      Absolute enthalpy [J/kg]



   .. py:method:: hs(p: float, T: float) -> float

      Sensible enthalpy [J/kg]



   .. py:method:: ua(p: float, T: float) -> float

      Absolute internal energy [J/kg]



   .. py:method:: us(p: float, T: float) -> float

      Sensible internal energy [J/kg]



   .. py:method:: cp(p: float, T: float) -> float

      Constant pressure heat capacity [J/kg/K]



   .. py:method:: cv(p: float, T: float) -> float

      Constant volume heat capacity [J/kg/K]



   .. py:method:: gamma(p: float, T: float) -> float

      Heat capacity ratio cp/cv [-]



