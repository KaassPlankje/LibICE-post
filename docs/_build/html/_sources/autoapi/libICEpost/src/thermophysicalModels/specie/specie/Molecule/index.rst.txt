libICEpost.src.thermophysicalModels.specie.specie.Molecule
==========================================================

.. py:module:: libICEpost.src.thermophysicalModels.specie.specie.Molecule

.. autoapi-nested-parse::

   @author: F. Ramognino       <federico.ramognino@polimi.it>
   Last update:        12/06/2023



Attributes
----------

.. autoapisummary::

   libICEpost.src.thermophysicalModels.specie.specie.Molecule.constants


Classes
-------

.. autoapisummary::

   libICEpost.src.thermophysicalModels.specie.specie.Molecule.MoleculeItem
   libICEpost.src.thermophysicalModels.specie.specie.Molecule.Molecule
   libICEpost.src.thermophysicalModels.specie.specie.Molecule.MoleculeIter


Module Contents
---------------

.. py:data:: constants

.. py:class:: MoleculeItem

   Dataclass used as return value by Molecule.__getitem__ method


   .. py:attribute:: atom
      :type:  libICEpost.src.thermophysicalModels.specie.specie.Atom.Atom


   .. py:attribute:: n
      :type:  float


.. py:class:: Molecule(specieName, atomicSpecie, numberOfAtoms)

   Bases: :py:obj:`libICEpost.src.base.Utilities.Utilities`


   Class containing information of a chemical specie.

   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   .. attribute:: name

      str
      Name of the chemical specie

   .. attribute:: atoms

      list<Atom>
      Atomic composition of the chemical specie

   .. attribute:: numberOfAtoms

      list<float>
      Number of atoms of each specie


   .. py:attribute:: name
      :type:  str


   .. py:attribute:: atoms
      :type:  list[libICEpost.src.thermophysicalModels.specie.specie.Atom.Atom]


   .. py:attribute:: numberOfAtoms
      :type:  list[float]


   .. py:property:: Rgas
      Compute the mass-specific gas constant of the molecule:
      Rgas = R / MM


   .. py:method:: empty()
      :classmethod:


      Overload empty initializer.



   .. py:method:: fromDictionary(dictionary)
      :classmethod:


      Construct from dictionary:
      {
          name:           str
              Name of the chemical specie
          atoms:          list<Atom>
              Atomic composition of the chemical specie
          numberOfAtoms:  list<float>
              Number of atoms of each specie
      }



   .. py:method:: __eq__(otherSpecie)

      Two chemical specie are equal if they have same name,
      the same atomic specie (with same names), and the same
      thermodynamic properties.



   .. py:method:: __ne__(other)

      Negation of __eq__ operator



   .. py:method:: __lt__(otherSpecie)

      Ordering by molecular weight



   .. py:method:: __gt__(otherSpecie)

      Ordering by molecular weight



   .. py:method:: __ge__(otherSpecie)

      Ordering by molecular weight



   .. py:method:: __le__(otherSpecie)

      Ordering by molecular weight



   .. py:method:: __iadd__(otherSpecie)

      In place addition. Possible additions:
          Molecule + Molecule = Molecule
          Molecule + Atom = Molecule



   .. py:method:: __add__(otherSpecie)

      Possible additions:
          Molecule + Molecule = Molecule
          Molecule + Atom = Molecule



   .. py:method:: __str__()


   .. py:method:: __repr__()


   .. py:method:: __contains__(entry)

      Checks if a Atom is part of the Molecule.



   .. py:method:: __index__(entry)

      Return the idex position of the Atom in the Molecule.



   .. py:method:: index(entry)

      Return the idex position of the Atom in the Molecule.



   .. py:method:: __len__()

      Return the number of Atomic specie in the molecule.



   .. py:method:: __getitem__(atom)

      atom:     str / Atom / int

      Get the data relative to Atom in the Molecule
          -> If str: checking for atom matching the name
          -> If Atom: checking for atomic specie
          -> If int:  checing for entry following the order

      Return: MoleculeItem



   .. py:method:: __iter__()

      Iteration over the atoms in the molecule.



   .. py:property:: MM
      Compute the molecular mass of the chemical specie.


   .. py:method:: bruteFormula()

      Returns the brute formula of the specie



   .. py:method:: atomList()

      Returns a list<Atom> containing a list of the atomic specie
      contained in the chemical specie.



   .. py:method:: atomicCompositionMatrix()

      Return a 1xN numpy.ndarray with the atomic composition
      matrix of the molecule, where N is the number of atoms
      in the molecule. Each element of the matrix is the number
      of atoms of the atomic specie in the mixture, sorted
      according to their order in 'atoms' array.



   .. py:method:: setName(value)

      Set the name of the specie.



.. py:class:: MoleculeIter(molecule: Molecule)

   Iterator for Molecule class.


   .. py:attribute:: molecule


   .. py:attribute:: atoms


   .. py:attribute:: current_index
      :value: 0



   .. py:method:: __iter__()


   .. py:method:: __next__()


