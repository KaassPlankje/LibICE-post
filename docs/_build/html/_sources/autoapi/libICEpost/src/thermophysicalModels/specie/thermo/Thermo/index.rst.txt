libICEpost.src.thermophysicalModels.specie.thermo.Thermo
========================================================

.. py:module:: libICEpost.src.thermophysicalModels.specie.thermo.Thermo


Submodules
----------

.. toctree::
   :maxdepth: 1

   /autoapi/libICEpost/src/thermophysicalModels/specie/thermo/Thermo/Thermo/index
   /autoapi/libICEpost/src/thermophysicalModels/specie/thermo/Thermo/constantCp/index
   /autoapi/libICEpost/src/thermophysicalModels/specie/thermo/Thermo/janaf7/index


Classes
-------

.. autoapisummary::

   libICEpost.src.thermophysicalModels.specie.thermo.Thermo.Thermo
   libICEpost.src.thermophysicalModels.specie.thermo.Thermo.janaf7
   libICEpost.src.thermophysicalModels.specie.thermo.Thermo.constantCp


Package Contents
----------------

.. py:class:: Thermo(Rgas: float)

   Bases: :py:obj:`libICEpost.src.base.BaseClass.BaseClass`


   Base class for computation of thermodynamic properties of chemical specie (cp, cv, ...)

   .. note::

      -> For interal energy-based models, need to implement us (sensible)
      -> For entalpy-based models, need to implement ha (absolute)

   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   .. attribute:: Rgas

      float
      The mass specific gas constant


   .. py:attribute:: Rgas


   .. py:method:: __str__()


   .. py:method:: __repr__()


   .. py:method:: cp(p: float, T: float) -> float
      :abstractmethod:


      Constant pressure heat capacity [J/kg/K]



   .. py:method:: hf() -> float
      :abstractmethod:


      Enthalpy of formation [J/kg]



   .. py:method:: ha(p: float, T: float) -> float

      Absolute enthalpy [J/kg]



   .. py:method:: ua(p: float, T: float) -> float

      Absolute internal energy [J/kg]

      us = ua + hf



   .. py:method:: us(p: float, T: float) -> float

      Sensible internal energy [J/kg]



   .. py:method:: hs(p: float, T: float) -> float

      Sensible enthalpy [J/kg]

      hs = ha - hf



   .. py:method:: dcpdT(p: float, T: float) -> float
      :abstractmethod:


      dcp/dT [J/kg/K^2]



.. py:class:: janaf7(Rgas, cpLow, cpHigh, Tth, Tlow, Thigh)

   Bases: :py:obj:`libICEpost.src.thermophysicalModels.specie.thermo.Thermo.Thermo.Thermo`


   Class for computation of thermophysical properties with NASA (janaf) 7-coefficient polynomials.

   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Attibutes:
       Rgas: float
           The mass specific gas constant

       cpLow:  list<float>
           List of polynomial coefficients to compute cp of the specie
           in the range of temperature below Tth

       cpHigh: list<float>
           List of polynomial coefficients to compute cp of the specie
           in the range of temperature above Tth

       Tth:    float
           Threshold temperature to change polynomial coefficient to
           be used to compute the cp of the specie

       Tlow:   float
           Lower limit of the range of valodity of the polynomial
           coefficients for computation of cp

       Thigh:   float
           Higher limit of the range of valodity of the polynomial
           coefficients for computation of cp


   .. py:attribute:: numCoeffs
      :value: 7



   .. py:attribute:: cpLow


   .. py:attribute:: cpHigh


   .. py:attribute:: Tth


   .. py:attribute:: Tlow


   .. py:attribute:: Thigh


   .. py:method:: __str__()


   .. py:method:: __repr__()


   .. py:method:: coeffs(T: float) -> float

      Get coefficients, depending on temperature range.



   .. py:method:: cp(p: float, T: float) -> float

      Constant pressure heat capacity [J/kg/K].
      If the temperature is not within Tlow and Thigh, a
      warning is displayed.

      cp(T) = sum_{i=0,4} ( a_{i} * T^i )



   .. py:method:: ha(p: float, T: float) -> float

      Absolute enthalpy [J/kg]
      If the temperature is not within Tlow and Thigh, a
      warning is displayed.


      ha(T) = sum_{i=0,4} ( a_{i}/(i + 1) * T^i )*T + a_{5}



   .. py:method:: hf() -> float

      Enthalpy of formation [J/kg]

      hf = ha(Tstd)



   .. py:method:: dcpdT(p: float, T: float) -> float

      dcp/dT [J/kg/K^2]
      If the temperature is not within Tlow and Thigh, a
      warning is displayed.

      dcp/dT(T) = sum_{i=1,4}(i * a_{i} * T^(i - 1))



   .. py:method:: fromDictionary(dictionary)
      :classmethod:


      Create from dictionary.

      {
          Rgas: float
              The mass specific gas constant
          cpLow:  list<float>
              List of polynomial coefficients to compute cp of the specie
              in the range of temperature below Tth
          cpHigh: list<float>
              List of polynomial coefficients to compute cp of the specie
              in the range of temperature above Tth
          Tth:    float
              Threshold temperature to change polynomial coefficient to
              be used to compute the cp of the specie
          Tlow:   float
              Lower limit of the range of valodity of the polynomial
              coefficients for computation of cp
          Thigh:   float
              Higher limit of the range of valodity of the polynomial
              coefficients for computation of cp
      }



.. py:class:: constantCp(Rgas, cp=None, cv=None, gamma=None, hf=float('nan'))

   Bases: :py:obj:`libICEpost.src.thermophysicalModels.specie.thermo.Thermo.Thermo.Thermo`


   Class for computation of thermophysical properties with constant cp cv and gamma.

   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Attibutes:
       Rgas: float
           The mass specific gas constant



   .. py:method:: fromDictionary(dictionary)
      :classmethod:


      Create from dictionary:
      {
          Rgas:  float
              Mass specific gas constant

          cp:    float (None)
              Mass-specific constant-pressure heat capacity

          cv:    float (None)
              Mass-specific constant-volume heat capacity

          gamma: float (None)
              cp/cv ratio

          hf:    float (0.0)
              Enthalpy of formation (optional)
      }

      Give 1 out of three of (cp, cv, gamma)



   .. py:method:: __str__()


   .. py:method:: __repr__()


   .. py:method:: cp(p: float, T: float) -> float

      Constant pressure heat capacity [J/kg/K]



   .. py:method:: ha(p: float, T: float) -> float

      Absolute enthalpy [J/kg]

      ha(T) = cp * (T - Tstd) + hf



   .. py:method:: hf() -> float

      Enthalpy of formation [J/kg]

      hf = ha(Tstd)



   .. py:method:: dcpdT(p: float, T: float) -> float

      dcp/dT [J/kg/K^2]



