libICEpost.src.base.Functions.typeChecking
==========================================

.. py:module:: libICEpost.src.base.Functions.typeChecking

.. autoapi-nested-parse::

   @author: F. Ramognino       <federico.ramognino@polimi.it>
   Last update:        12/06/2023

   Functions for type checking.



Functions
---------

.. autoapisummary::

   libICEpost.src.base.Functions.typeChecking.checkType
   libICEpost.src.base.Functions.typeChecking.checkTypes
   libICEpost.src.base.Functions.typeChecking.checkInstanceTemplate
   libICEpost.src.base.Functions.typeChecking.updateKeywordArguments
   libICEpost.src.base.Functions.typeChecking.checkContainer


Module Contents
---------------

.. py:function:: checkType(entry: str, Type: type | tuple[type], entryName: str | None = None, *, intAsFloat: bool = True, checkForNone: bool = False, **kwargs)

   entry:          Instance
       Instance to be checked
   Type:           type|tuple[type]
       Type required
   entryName:      str  (None)
       Name of the entry to be checked (used as info when raising TypeError)

   Keyword arguments:

   intAsFloat:     bool (True)
       Treat int as floats for type-checking
   checkForNone:   bool (False)
       If False, no type checking is performed on Type==NoneType

   Check if instance 'entry' is of type of 'Type'.


.. py:function:: checkTypes(entry, TypeList, entryName=None, **argv)

   entry:          Instance
       Instance to be checked
   TypeList:       list<type>
       Possible types
   entryName:      str  (None)
       Name of the entry to be checked (used as info when raising TypeError)

   Keyword arguments:

   intAsFloat:     bool (True)
       Treat int as floats for type-checking
   checkForNone:   bool (False)
       If False, no type checking is performed on Type==NoneType

   Check if instance 'entry' is of any of the types in 'TypeList'.


.. py:function:: checkInstanceTemplate(entry, templateEntry, entryName=None, **argv)

   entry:          Instance
       Instance to be checked
   templateEntry:  Instance
       Instance to be used as template for argument checking. If the template
       is a container (for example: list) with [len > 0] the check is
       performed recursively for each element of 'entry', comparing against
       the first element of 'templateEntry' instance.
   entryName:      str  (None)
       Name of the entry to be checked (used as info when raising TypeError)

   Keyword arguments:
   intAsFloat:     bool (True)
       Treat int as floats for type-checking
   checkForNone:   bool (False)
       If True, check for NoneType in case a template entry is None,
       otherwise it means no check is needed
   allowEmptyContainer:   bool (False)
       If applying recursive type-checking, allow an entry to be an
       empty container even if the template has elements in it.

   Check if instance 'entry' is of same type of 'templateEntry',
   checking recursively if the instance is a container.


.. py:function:: updateKeywordArguments(Argv, defaultArgv, **argv)

   Argv:           dict
       Keyword arguments
   defaultArgv:    dict
       Default keyword argumentspeError)

   Keyword arguments:
   intAsFloat:     bool (True)
       Treat int as floats for type-checking
   checkForNone:   bool (False)
       If True, check for NoneType in case a template entry is None,
       otherwise it means no check is needed
   allowEmptyContainer:   bool (False)
       If applying recursive type-checking, allow an entry to be an
       empty container even if the template has elements in it.

   Check keyword arguments.


.. py:function:: checkContainer(entry, container, itemType, entryName=None, **argv)

   entry:          Instance
       Instance to be checked
   container:      Type
       Container type
   itemType:       Type
       Type of the elements of the container
   entryName:      str  (None)
       Name of the entry to be checked (used as info when raising TypeError)

   Keyword arguments:
   intAsFloat:     bool (True)
       Treat int as floats for type-checking
   allowEmptyContainer:   bool (False)
       Allow the entry to be an empty container.

   Check if instance 'entry' is a container of type 'container<itemType>'.


