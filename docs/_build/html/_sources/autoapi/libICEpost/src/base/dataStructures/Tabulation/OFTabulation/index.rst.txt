libICEpost.src.base.dataStructures.Tabulation.OFTabulation
==========================================================

.. py:module:: libICEpost.src.base.dataStructures.Tabulation.OFTabulation

.. autoapi-nested-parse::

   @author: F. Ramognino       <federico.ramognino@polimi.it>
   Last update:        12/06/2023



Classes
-------

.. autoapisummary::

   libICEpost.src.base.dataStructures.Tabulation.OFTabulation.OFTabulation


Module Contents
---------------

.. py:class:: OFTabulation(tablePath=path, noWrite=noWrite, **argv)

   Bases: :py:obj:`src.base.Utilities.Utilities`


   Class used to store and handle an OpenFOAM tabulation.

   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Attibutes:
       path:               str
           Path where the tabulation is stored

       entryNames:     dict    [{}]
           {
               entri_ii:     str
                   Name to give at the generic entry 'entry_ii' found in the dictionay
                   tableProperties.
           }
           Used to (optionally) change the names of the variables stored in the table.

       tableProperties:    dict
           {
               var_ii:   list<float>
                   Contains the list of sampling points for variable 'var_ii'
           }
           Dictionary containing the information retrieved from tableProperties.

       varOrder:           list<str>
           Order in which the variables are red convert the scalarLists in tables.

       noWrite:        bool
           Label controlling if the class is allowed to write the files

       tables:             dict
           {
               'tab_ii':   Tabulation
           }
           Contains the tabulations.

       tableFileNames:     dict
           {
               'tab_ii':   str
           }
           Contains the names of files for the tabulations.

       opts:       dict
       {
           Fatal:          bool
               If set to 'True', raises a ValueError in case the input data is outside
               of tabulation range. Otherwise a warning is displayed.

           extrapolate:    bool
               If set to 'True' the value is extrapolated in case accessing the table
               outside of ranges. Otherwise, the value is set to 'nan'.
       }


   .. py:attribute:: defaultOpts


   .. py:attribute:: path
      :value: None



   .. py:attribute:: entryNames


   .. py:attribute:: tableProperties


   .. py:attribute:: varOrder
      :value: []



   .. py:attribute:: tables


   .. py:attribute:: tableFileNames


   .. py:attribute:: noWrite
      :value: True



   .. py:method:: fromFile(tablePath, varOrder, tableFileNames, entryNames={}, noWrite=noWrite, noRead=[], **argv)
      :classmethod:


      tablePath:      str
          The path where the tabulation is stored
      varOrder:       list<str>
          Order of the variables used to access the tabulation
      tableFileNames: list<str>
          Names of files in 'tablePath/const' where the tables are stored
      entryNames:     dict    ({})
          {
              entri_ii:     str
                  Name to give at the generic entry 'entry_ii' found in the dictionary
                  tableProperties.
          }
          Used to (optionally) change the names of the variables stored in the table.
      noWrite:        bool (True)
          Handle to prevent write access of this class to the tabulation
      noRead:         list<str>   ([])
          Tables that are not to be red from files

      [keyword arguments]
      Fatal:          bool (False)
          If set to 'True', raises a ValueError in case the input data is outside
          of tabulation range. Otherwise a warning is displayed.

      extrapolate:    bool (True)
          If set to 'True' the value is extrapolated in case accessing the table
          outside of ranges. Otherwise, the value is set to the 'nan'.

      Construct a table from files stored in 'tablePath'.



   .. py:method:: __getitem__(slices)

      slices:   tuple<slice/list<int>/int>

      Extract a tabulation with sliced dataset. New table is
      initialized without associated directory (path = None) and
      in read-only mode (noWrite = True).



   .. py:method:: readTableProperties(entryNames={}, **argv)

      entryNames:     dict    [{}]
          {
              entri_ii:     str
                  Name to give at the generic entry 'entry_ii' found in the dictionay
                  tableProperties.
          }
          Used to (optionally) change the names of the variables stored in the table.

      Read information stored in file '<path>/tableProperties' related to the ranges
      in the table.



   .. py:method:: setOrder(varOrder=None)

      varOrder:     list<str>
          Looping order (from outern-most to inner-most) in which the variables
          are to be red to convert the scalarList in table.



   .. py:method:: readTable(fileName, tableName, **argv)

      fileName:   str
      tableName:  str

      [keyword arguments]
      Fatal:          bool (False)
          If set to 'True', raises a ValueError in case the input data is outside
          of tabulation range. Otherwise a warning is displayed.

      extrapolate:    bool (True)
          If set to 'True' the value is extrapolated in case accessing the table
          outside of ranges. Otherwise, the value is set to the 'nan'.

          Loads a table stored at in file '<path>/constant/<fileName>'. Saves a 'table'
          instance with the loaded data in self.tables[tableName].



   .. py:method:: ranges()

      Get a dict containing the data ranges in the tabulation (unmutable).
          {
              'var_ii':       list<float>[2]
                  Contains min and max of 'var_ii' sampling points.
          }



   .. py:method:: ndim()

      Returns the dimentsions of the table (int)



   .. py:method:: shape()

      Returns the a tuple<int> containing the dimensions (dim1, dim2,..., dimn) of the tabulation.



   .. py:method:: size()

      Returns the number of data-points stored in the table (int)



   .. py:method:: checkDir()

      Check if all information required to read the tabulation are consistent and present in 'path'. Looking for:
          path
          path/constant
          path/tableProperties



   .. py:method:: mergeTable(fieldName, secondTable)

      fieldName:  str
          Field to use to append second table

      secondTable: Tabulation
          Tabulation containing the data to introduce

      Introduce additional data to the tabulation.



   .. py:method:: write(tableFolder=None)

      tableFolder:    str
          Path where to save the table. In case not give, self.path is used.
      Write the tabulation.



   .. py:method:: clear()

      Reset the tabulation arguments to default values.



