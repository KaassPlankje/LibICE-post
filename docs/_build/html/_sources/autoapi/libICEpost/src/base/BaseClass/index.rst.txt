libICEpost.src.base.BaseClass
=============================

.. py:module:: libICEpost.src.base.BaseClass

.. autoapi-nested-parse::

   @author: F. Ramognino       <federico.ramognino@polimi.it>
   Last update:        12/06/2023



Classes
-------

.. autoapisummary::

   libICEpost.src.base.BaseClass.SelectionTable
   libICEpost.src.base.BaseClass.BaseClass


Functions
---------

.. autoapisummary::

   libICEpost.src.base.BaseClass._add_TypeName


Module Contents
---------------

.. py:function:: _add_TypeName(cls: type)

   Function used to add the TypeName a class.


.. py:class:: SelectionTable(cls: type)

   Bases: :py:obj:`libICEpost.src.base.Utilities.Utilities`


   Table for storing classes for run-time selection.


   .. py:attribute:: __type
      :type:  type


   .. py:attribute:: __db
      :type:  dict[str:type]


   .. py:property:: type
      :type: type

      The base class to which the selection table is linked.


   .. py:property:: db
      :type: dict[str:type]

      Database of available sub-classes in the selection table.
      Classes are stored through [str->type] map.


   .. py:method:: __str__()

      Printing selection table



   .. py:method:: __repr__()

      Representation of selection table



   .. py:method:: __contains__(typeName: str) -> bool

      typeName: str
          Name of the class to look-up

      Check if the selection table contains a selectable class called 'typeName'.



   .. py:method:: __getitem__(typeName: str)

      Get from database



   .. py:method:: add(cls: type, overwrite=True) -> None

      cls: type
          Subclass to add to the selection table
      overwrite: bool (True)
          Overwrite?
      Add class to selection table



   .. py:method:: check(typeName: str) -> bool

      typeName: str
          Name of class to be checked

      Checks if a class name is in the selection table, raises ValueError if false



.. py:class:: BaseClass

   Bases: :py:obj:`libICEpost.src.base.Utilities.Utilities`


   Class wrapping useful methods for base virtual classes (e.g. run-time selector)


   .. py:method:: selectionTable() -> SelectionTable
      :classmethod:


      The run-time selection table associated to this class.



   .. py:method:: selector(typeName: str, dictionary: dict) -> Self
      :classmethod:


      typeName:  str
          Name of the class to be constructed

      dictionary: dict
          Dictionary used for construction

      Construct an instance of a subclass of this that was added to the selection table.



   .. py:method:: hasSelectionTable() -> bool
      :classmethod:


      Check if selection table was defined for this class.



   .. py:method:: fromDictionary(dictionary) -> Self
      :classmethod:

      :abstractmethod:


      dictionary: dict ({})
          Dictionary used for construction

      Construct an instance of this class from a dictionary. To be overwritten by derived class.



   .. py:method:: addToRuntimeSelectionTable(childClass: type, /, *, overwrite=True) -> None
      :classmethod:


      childClass:  class
          The class to be added to the selection table
      overwrite: bool (True)
          Overwrite if already present in selection table, otherwise rise error.

      Add the subclass to the database of available subclasses for runtime selection.



   .. py:method:: createRuntimeSelectionTable() -> None
      :classmethod:


      Create the runtime selection table, initializing the property 'selectionTable' of the class.



   .. py:method:: showRuntimeSelectionTable() -> None
      :classmethod:


      Prints a string containing a list of available classes in the selection table and if they are instantiable.

      E.g.:

      Available classes in selection table:
          ClassA       (Abstract class)
          ClassB
          ClassC



