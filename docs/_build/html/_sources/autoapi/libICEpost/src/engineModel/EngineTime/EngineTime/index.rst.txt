libICEpost.src.engineModel.EngineTime.EngineTime
================================================

.. py:module:: libICEpost.src.engineModel.EngineTime.EngineTime

.. autoapi-nested-parse::

   @author: F. Ramognino       <federico.ramognino@polimi.it>
   Last update:        12/06/2023



Classes
-------

.. autoapisummary::

   libICEpost.src.engineModel.EngineTime.EngineTime.EngineTime


Module Contents
---------------

.. py:class:: EngineTime(speed, *, IVC, EVO, startTime=None, endTime: float = None)

   Bases: :py:obj:`libICEpost.src.base.BaseClass.BaseClass`


   Base class for handling engine geometrical parameters during cycle.

   NOTE: Crank angles are defined with 0 CAD at FIRING TDC

   ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

   Attibutes:

       [Variable] | [Type]     | [Unit] | [Description]
       -----------|------------|--------|-------------------------------------------
       startTime  | float(None)| CA     | The start-time for post-processing.
                  |            |        | If None, uses IVC
       IVC        | float      | CA     | Inlet valve closing
       EVO        | float      | CA     | Inlet valve closing
       -----------|------------|--------|-------------------------------------------
       n          | float      | rpm    | Rotational speed
       omega      | float      | rad/s  |


   .. py:attribute:: time
      :type:  float

      Current time-step


   .. py:attribute:: deltaT
      :type:  float

      The old time instant


   .. py:attribute:: oldTime
      :type:  float

      The start time


   .. py:attribute:: startTime
      :type:  float

      The end time


   .. py:attribute:: endTime
      :type:  float


   .. py:property:: timings
      :type: dict[str:float]

      A dictionary with the relevant timings (IVC, EVO, etc...)

      :returns: float]
      :rtype: dict[str


   .. py:method:: fromDictionary(dictionary)
      :classmethod:


      Construct from dicionary



   .. py:property:: dCAdt
      :type: float

      conversion ratio from CA to s


   .. py:method:: __str__()


   .. py:method:: __call__(timeList: list[float])

      Iteration over time steries, from startTime to endTime.

      :param timeList: list of times
      :type timeList: list[float]

      :Yields: *float* -- current time



   .. py:method:: CA2Time(CA: float | collections.abc.Iterable) -> float | numpy.ndarray[float]

      Converts CA to time [s]

      :param CA: Time in CA
      :type CA: float | Iterable

      :returns: Time in seconds
      :rtype: float|np.ndarray[float]



   .. py:method:: Time2CA(t: float | collections.abc.Iterable) -> float | numpy.ndarray

      Converts time [s] to CA

      :param t: Time in seconds
      :type t: float | Iterable

      :returns: time in CA
      :rtype: float|np.ndarray



   .. py:method:: isCombustion(CA: float | collections.abc.Iterable = None) -> bool | numpy.ndarray[bool]

      Check if combustion has started.

      :param CA: Cranc angle to check. If None, checks for self.time
      :type CA: float | Iterable | None

      :returns: If combustion started
      :rtype: bool|np.ndarray[bool]



   .. py:method:: startOfCombustion() -> float | None

      Instant of start of combustion (overwritten in derived class depending on combustion mode). By default, returns None (motoring condition).



   .. py:method:: isClosedValves(CA: float | collections.abc.Iterable = None) -> bool | numpy.ndarray[bool]

      Check if at closed valves (after IVC and before EVO)

      :param CA: Cranc angle to check. If None, checks for self.time
      :type CA: float | Iterable | None

      :returns: If at closed valves
      :rtype: bool|np.ndarray[bool]



   .. py:method:: updateStartTime(timeList: collections.abc.Iterable[float]) -> None

      Update the start-time to be consistent with the avaliable data

      :param timeList: The avaliable time series
      :type timeList: Iterable[float]



